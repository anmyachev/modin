{"project": "modin", "project_url": "https://modin.readthedocs.io/", "show_commit_url": "https://github.com/modin-project/modin/commit/", "hash_length": 8, "revision_to_hash": {"29": "45be5033b1d8578bd9af39ac18a973054bb46c21", "44": "cc47fdd73684b50397da91694be2351ab1bc3175", "52": "cccea0bed17349727ba13376ee7cc62ac5619852", "103": "26833bb8e7c1dcbab348c63ae9ad88d98c21c4de", "119": "acf323c9d56b779d6b71b4facf70bb1392c775d0", "142": "afff86c6f75af0b6b2427faa7398ca68a5edf466", "147": "a0dd74299f03e362f41f9c7c629a8e345e665bc7", "159": "8d4efd0ce85a4f7297b344ad691f78ee355daf23", "233": "0c218246a97f09cfc3fdc90926230dd2a1b1934a", "246": "79c111337ef2d0f6240821619a70e4583cf846d0", "269": "ff8960e1aeada95d3e09cd30bcd53e386b56ecaf", "278": "50a7a27b9ca7ad82ef43163053c4b37fc2793b6c", "284": "7ee7a98496328a450e6854f5e78cdfcd06a260e8", "343": "09ff0c2e4e28e01c2625c05d9a23fd043c693b96", "356": "2ab1170df4a6e8ae4ca9d5a51554f921884794e9", "359": "c1c985ae179ee425c637021efb1cb31fc719970e", "380": "588272bf2c9811cbfd08da810a5b2ec7f83e65c0", "406": "a351907e94e44027a56afe008171e3396370681d", "428": "ac2c9da232efad0a0066698f65804f01681e7986", "444": "3caf783d5ad4501c0489c088b7bb2fa5a54f128b", "457": "cf7be8c9eaf6732a0d3240aebbf5f40982002e36", "478": "9966f6821155285b784b0670cb4e1b91a243b63d", "554": "6aac82bc06d8fd57d603d11ca62a966973839610", "582": "90191f115e0ad57394598551fd2fd2ee8f70ed43", "589": "9e1b699dc129140be2fd6e9276bbe090fe7c06ab", "687": "27b68f2cb91fa9d435152b873e3437a22ae7c709", "933": "4d35e7076a938b2cc327ce8d6e1922dd69bcff00", "1042": "03a919eab67492a5e41ecc712051beb37c75598b", "1303": "5b6f73a98cc0ee5a78503704b98b7268709dc797", "1305": "0e200c6219547ec20aad43718d5ec6d3ea501a3b", "1428": "3395b595d5bb460fecfd706c7d098b4610c9c9dd", "1431": "eba3abc3a23dd4426fc359be124648a8ba851d54", "1510": "c2e7f9ecb6a31cd0d59f4ce17dacb059980c45f7"}, "revision_to_date": {"29": 1530958932000, "44": 1532832060000, "52": 1537217633000, "103": 1539706572000, "119": 1540489521000, "142": 1541914566000, "147": 1542344110000, "159": 1543783281000, "233": 1547191609000, "246": 1548355112000, "269": 1549573658000, "278": 1551152349000, "284": 1551927428000, "343": 1557116901000, "356": 1559055183000, "359": 1559317856000, "380": 1560910205000, "406": 1563339307000, "428": 1567400441000, "444": 1569029417000, "457": 1571246222000, "478": 1574055162000, "554": 1579676141000, "582": 1582587141000, "589": 1583521430000, "687": 1588098607000, "933": 1594058570000, "1042": 1596062677000, "1303": 1601507094000, "1305": 1601563997000, "1428": 1604963155000, "1431": 1605028236000, "1510": 1607070009000}, "params": {"arch": ["AMD64"], "cpu": [""], "machine": ["asv-test"], "num_cpu": ["8"], "os": ["Windows 10"], "ram": [""], "python": ["3.7"], "packaging": [""], "pandas": ["1.1.4"], "pip+ray": ["1.0.1"], "pyarrow": ["1.0"], "branch": ["master"]}, "graph_param_list": [{"arch": "AMD64", "cpu": "", "machine": "asv-test", "num_cpu": "8", "os": "Windows 10", "ram": "", "python": "3.7", "packaging": "", "pandas": "1.1.4", "pip+ray": "1.0.1", "pyarrow": "1.0", "branch": "master"}], "benchmarks": {"benchmarks.TimeArithmetic.time_apply": {"code": "class TimeArithmetic:\n    def time_apply(self, impl, data_type, data_size, axis):\n        self.df.apply(lambda df: df.sum(), axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_apply", "number": 0, "param_names": ["impl", "data_type", "data_size", "axis"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"], ["0", "1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "125ec85f9dca42d30578c2ea0a61e865b60a929f73213d23a03ac03054fd7b10", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_median": {"code": "class TimeArithmetic:\n    def time_median(self, impl, data_type, data_size, axis):\n        self.df.median(axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_median", "number": 0, "param_names": ["impl", "data_type", "data_size", "axis"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"], ["0", "1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "228aba9897daf979d80378ead60e8bd3f70fc7a6c0d7092c7042797c676d5951", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_nunique": {"code": "class TimeArithmetic:\n    def time_nunique(self, impl, data_type, data_size, axis):\n        self.df.nunique(axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_nunique", "number": 0, "param_names": ["impl", "data_type", "data_size", "axis"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"], ["0", "1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "668fc4fe0bd2551aa7e577b5cd1d51ef457786f2ddf0c95d3ca05b0ad12db380", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_sum": {"code": "class TimeArithmetic:\n    def time_sum(self, impl, data_type, data_size, axis):\n        self.df.sum(axis=axis)\n\n    def setup(self, impl, data_type, data_size, axis):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_sum", "number": 0, "param_names": ["impl", "data_type", "data_size", "axis"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"], ["0", "1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d68f8547236a8e4fc42bdcec247f7389ac8781248b368f9f4386ea0cbaff7a8a", "warmup_time": -1}, "benchmarks.TimeBinaryOp.time_binary_op": {"code": "class TimeBinaryOp:\n    def time_binary_op(self, data_type, data_size, binary_op, axis):\n        self.op(self.df2, axis=axis)\n\n    def setup(self, data_type, data_size, binary_op, axis):\n        # shape for generate_dataframe: first - ncols, second - nrows\n        self.df1 = generate_dataframe(\n            \"modin\", data_type, data_size[1], data_size[0], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            \"modin\", data_type, data_size[3], data_size[2], RAND_LOW, RAND_HIGH\n        )\n        self.op = getattr(self.df1, binary_op)", "min_run_count": 2, "name": "benchmarks.TimeBinaryOp.time_binary_op", "number": 0, "param_names": ["data_type", "data_size", "binary_op", "axis"], "params": [["'int'"], ["(10128, 100, 10000, 128)"], ["'mul'"], ["0", "1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b35b2035f28456ea602e23738321dfc336204725e7cf00810f76cf51b917cabc", "warmup_time": -1}, "benchmarks.TimeConcat.time_concat": {"code": "class TimeConcat:\n    def time_concat(self, data_type, data_size, how, axis):\n        pd.concat([self.df1, self.df2], axis=axis, join=how)\n\n    def setup(self, data_type, data_size, how, axis):\n        # shape for generate_dataframe: first - ncols, second - nrows\n        self.df1 = generate_dataframe(\n            \"modin\", data_type, data_size[1], data_size[0], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            \"modin\", data_type, data_size[3], data_size[2], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeConcat.time_concat", "number": 0, "param_names": ["data_type", "data_size", "how", "axis"], "params": [["'int'"], ["(10128, 100, 10000, 128)"], ["'inner'"], ["0", "1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b69a79684a591313b84d7a990ae2beca47e5a791cfcee26644bc203152bc7f1", "warmup_time": -1}, "benchmarks.TimeGroupBy.time_groupby_count": {"code": "class TimeGroupBy:\n    def time_groupby_count(self, impl, data_type, data_size):\n        self.df.groupby(by=self.df.columns[0]).count()\n\n    def setup(self, impl, data_type, data_size):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupBy.time_groupby_count", "number": 0, "param_names": ["impl", "data_type", "data_size"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0d34a960748fd6de8f815df199a9caeb5c68b8d97961440a631fe91193c5b027", "warmup_time": -1}, "benchmarks.TimeGroupBy.time_groupby_mean": {"code": "class TimeGroupBy:\n    def time_groupby_mean(self, impl, data_type, data_size):\n        self.df.groupby(by=self.df.columns[0]).mean()\n\n    def setup(self, impl, data_type, data_size):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupBy.time_groupby_mean", "number": 0, "param_names": ["impl", "data_type", "data_size"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "51c7772a616cf72e00c3e5e139af5aa8562efda1cc59fbebc68c5555f79b6347", "warmup_time": -1}, "benchmarks.TimeGroupBy.time_groupby_sum": {"code": "class TimeGroupBy:\n    def time_groupby_sum(self, impl, data_type, data_size):\n        self.df.groupby(by=self.df.columns[0]).sum()\n\n    def setup(self, impl, data_type, data_size):\n        self.df = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupBy.time_groupby_sum", "number": 0, "param_names": ["impl", "data_type", "data_size"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100)"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f6b2d152cedd8c344aa45abe514e99b22bfcb537b4c6fd0d08a1063831fe4a68", "warmup_time": -1}, "benchmarks.TimeJoin.time_join": {"code": "class TimeJoin:\n    def time_join(self, impl, data_type, data_size, how, sort):\n        self.df1.join(\n            self.df2, on=self.df1.columns[0], how=how, lsuffix=\"left_\", sort=sort\n        )\n\n    def setup(self, impl, data_type, data_size, how, sort):\n        self.df1 = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            impl, data_type, data_size[2], data_size[3], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeJoin.time_join", "number": 0, "param_names": ["impl", "data_type", "data_size", "how", "sort"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100, 2000, 100)"], ["'left'", "'right'", "'outer'", "'inner'"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "39cc203941b3912bc186bbee45ea93cb333ddc504233be3321cb174cf88855ef", "warmup_time": -1}, "benchmarks.TimeMerge.time_merge": {"code": "class TimeMerge:\n    def time_merge(self, impl, data_type, data_size, how, sort):\n        self.df1.merge(self.df2, on=self.df1.columns[0], how=how, sort=sort)\n\n    def setup(self, impl, data_type, data_size, how, sort):\n        self.df1 = generate_dataframe(\n            impl, data_type, data_size[0], data_size[1], RAND_LOW, RAND_HIGH\n        )\n        self.df2 = generate_dataframe(\n            impl, data_type, data_size[2], data_size[3], RAND_LOW, RAND_HIGH\n        )", "min_run_count": 2, "name": "benchmarks.TimeMerge.time_merge", "number": 0, "param_names": ["impl", "data_type", "data_size", "how", "sort"], "params": [["'modin'", "'pandas'"], ["'int'"], ["(2000, 100, 2000, 100)"], ["'left'", "'right'", "'outer'", "'inner'"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4e07a06905444f38bd987d0530f18d1232b1d387be4d687b6a7b4d6c864c184c", "warmup_time": -1}}, "machines": {"asv-test": {"arch": "AMD64", "cpu": "", "machine": "asv-test", "num_cpu": "8", "os": "Windows 10", "ram": "", "version": 1}}, "tags": {"0.7.0": 554, "0.7.1": 582, "0.7.2": 589, "0.7.3": 687, "0.7.4": 933, "0.8.0": 1042, "0.8.1": 1303, "0.8.1.1": 1305, "0.8.2": 1428, "0.8.2.1": 1431, "Modin-v0.1.0": 29, "v0.1.1": 44, "v0.1.2": 52, "v0.2.0": 103, "v0.2.2": 119, "v0.2.3": 142, "v0.2.4": 147, "v0.2.5": 159, "v0.3.0": 246, "v0.3.0rc1": 233, "v0.3.1": 269, "v0.4.0": 284, "v0.4.0rc1": 278, "v0.5.0": 343, "v0.5.1": 356, "v0.5.2": 359, "v0.5.3": 380, "v0.5.4": 406, "v0.6.0": 428, "v0.6.1": 444, "v0.6.2": 457, "v0.6.3": 478}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}